AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  VpcID:
    Type: AWS::EC2::VPC::Id
    ConstraintDescription: Must be a valid VPC ID
  SubnetIds:
    Description: Select existing subnets within the chosen VPC
    Type: List<AWS::EC2::Subnet::Id>
    ConstraintDescription: Must be a list of valid subnet IDs    
  AmazonLinux2LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64
  MyIPAddress:
    Type: String
    Default: 0.0.0.0/0 
    Description: Tu dirección IP pública actual
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Nombre de la clave SSH para acceder al servidor EC2
Resources:
  SampleWebAppEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: !Ref AmazonLinux2LatestAmiId
      SubnetId: !Select [0, !Ref SubnetIds] # Selecciona la primera subred de la lista
      SecurityGroupIds:
        - !GetAtt SampleWebAppEC2SecurityGroup.GroupId # Usa el grupo de seguridad
      KeyName: !Ref KeyName
      UserData:
        Fn::Base64: |
          #!/bin/bash
          sudo yum update -y
          sudo yum install docker git -y
          sudo service docker enable
          sudo service docker start
          sudo usermod -a -G docker ec2-user 
          DC_VERSION=$(curl -L -s -H 'Accept: application/json' https://github.com/docker/compose/releases/latest | sed -e 's/.*"tag_name":"\([^"]*\)".*/\1/')
          sudo curl -L "https://github.com/docker/compose/releases/download/$DC_VERSION/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          sudo service docker restart
      Tags:
           - Key: Name
             Value: aws-fis-example
  SampleWebAppEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for apache instances
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIp: !Sub "${MyIPAddress}"
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
      VpcId: !Ref VpcID

  SampleWebAppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups:
        - !GetAtt SampleWebAppEC2SecurityGroup.GroupId # Usa el grupo de seguridad
      Subnets: !Ref SubnetIds
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: routing.http.drop_invalid_header_fields.enabled
          Value: "true"

  SampleWebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: "80"
      Protocol: HTTP
      TargetType: instance
      VpcId: !Ref VpcID
      Targets:
           - Id: !Ref SampleWebAppEC2Instance
             Port: 80

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref SampleWebAppLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref SampleWebAppTargetGroup

Outputs:
  SampleWebAppLoadBalancerDNSName:
    Description: DNS name of the load balancer
    Value: !GetAtt SampleWebAppLoadBalancer.DNSName

  SampleWebAppEC2PublicIP:
    Description: Public IP Address of the EC2 instance
    Value: !GetAtt SampleWebAppEC2Instance.PublicIp
