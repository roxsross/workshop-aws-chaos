name: Pipeline RoxsOnfire

on:
  push:
    branches: 
      - master
  pull_request:
    branches:
      - master

  workflow_dispatch:

env:
  REGISTRY: ${{ secrets.DOCKER_USERNAME }}
  REPOSITORY: ${{ github.event.repository.name }}

jobs:
  
  # Build:
  #   name: ðŸ“Œ Build and Push DockerHub"
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: Set up QEMU
  #     uses: docker/setup-qemu-action@v2
  #   - name: Set up Docker Buildx
  #     uses: docker/setup-buildx-action@v2
  #   - name: Login to Docker Hub
  #     uses: docker/login-action@v2
  #     with:
  #       username: ${{ secrets.DOCKER_USERNAME }}
  #       password: ${{ secrets.DOCKER_PASSWORD }}
  #   - name: Build and push
  #     run: |
  #       VERSION=`jq -r '.version' ./package.json`
  #       docker build -t $REGISTRY/$REPOSITORY:$VERSION .
  #       docker push $REGISTRY/$REPOSITORY:$VERSION
  
  # Update-Compose:
  #   name: ðŸ“‘ Update Docker-Compose
  #   runs-on: ubuntu-latest
  #   needs: [Build]
  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: Update Docker-Compose
  #     run: |
  #       VERSION=`jq -r '.version' ./package.json`
  #       NAME=$(git rev-parse --abbrev-ref HEAD)
  #       sed -i -- "s/VERSION/$VERSION/g" docker-compose.yaml
  #       cat docker-compose.yaml
  #   - uses: actions/upload-artifact@v3
  #     with:
  #       name: docker
  #       path: docker-compose.yaml
        
  # deploy:
  #   name: ðŸ›³ Deploy
  #   runs-on: ubuntu-latest
  #   needs: [Update-Compose]
  #   steps:
  #   - uses: actions/checkout@v3
  #   - uses: actions/download-artifact@v3
  #     with:
  #       name: docker 
  #   - name: copy file to Aws EC2
  #     uses: appleboy/scp-action@master
  #     with:
  #       host: ${{ secrets.HOST }}
  #       username: ${{ secrets.USERNAME }}
  #       port: ${{ secrets.PORT }}
  #       key: ${{ secrets.KEY }}
  #       source: "docker-compose.yaml"
  #       target: "/home/ec2-user"    
  #   - name: Deploy Docker-Compose
  #     uses: appleboy/ssh-action@v0.1.7
  #     with:
  #       host: ${{ secrets.HOST }}
  #       username: ${{ secrets.USERNAME }}
  #       key: ${{ secrets.KEY }}
  #       port: ${{ secrets.PORT }}
  #       script: |
  #         whoami
  #         docker-compose up -d   

  chaos-aws-fis:
    name: ðŸ“‘ Experiments AWS FIS
    runs-on: ubuntu-latest
    # needs: [deploy]
    steps:
    - uses: actions/checkout@v3
    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: "us-east-1" 
    # Hello from AWS: WhoAmI
    - name: Sts GetCallerIdentity
      run: |
        aws sts get-caller-identity          
    - name: Ejecutar Experimento
      env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: 'us-east-1'
      run: |
          echo "Create Reboot template"
          aws sts get-caller-identity
          export REGION=$(aws ec2 describe-availability-zones --output text --query 'AvailabilityZones[0].[RegionName]')
          export ACCOUNT_ID=$(aws sts get-caller-identity --output text --query 'Account')
          export TEMPLATE_NAME="RebootInstancia"
          TEMPLATE_ID=$( aws fis list-experiment-templates --query "experimentTemplates[?tags.Name=='${TEMPLATE_NAME}'].id" --output text )
          echo $TEMPLATE_ID
          experiment_output=$(aws fis start-experiment --experiment-template-id "$TEMPLATE_ID")
          if [ $? -eq 0 ]; then
              echo "Experimento iniciado con Ã©xito."
              # Extraer el ID del experimento iniciado
              experiment_id=$(echo "$experiment_output" | jq -r '.experiment.id')
              export $experiment_id 
              echo "ID del experimento iniciado: $experiment_id"
              job_status=""
                while [[ $job_status != "completed" && $job_status != "failed" ]];
                do
                    sleep 20;
                    job_status=$(aws fis get-experiment --id="$experiment_id" | jq -r .experiment.state.status);
                done;
                echo "$job_status"          
          else
              echo "Error al iniciar el experimento."
          fi

